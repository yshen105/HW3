1. Describe the problem generics address.
Generics address the problem of code reuse, type safety, and performance. 

2. How would you create a list of strings, using the generic List class?
List<string> stringList = new List<string>();

3. How many generic type parameters does the Dictionary class have?
wo generic type parameters: one for the key and one for the value.

4. True/False. When a generic class has multiple type parameters, they must all match.
F

5. What method is used to add items to a List object?
list.Add(item);

6. Name two methods that cause items to be removed from a List.
Remove and RemoveAt.

7. How do you indicate that a class has a generic type parameter?
Indicate that a class has a generic type parameter by using angle brackets <>

8. True/False. Generic classes can only have one generic type parameter.
F

9. True/False. Generic type constraints limit what can be used for the generic type.
T

10. True/False. Constraints let you use the methods of the thing you are constraining to.
T

1. 
using System;
using System.Collections.Generic;
public class MyStack<T>
{
    private List<T> _elements = new List<T>();

    public int Count()
    {
        return _elements.Count;
    }

    public T Pop()
    {
        return element;
    }

    public void Push(T element)
    {
        _elements.Add(element);
    }
}

2. 
public class MyList<T>
{
    private List<T> _elements = new List<T>();

    public void Add(T element)
    {
        _elements.Add(element);
    }

    public T Remove(int index)
    {
        if (index < 0 || index >= _elements.Count)
            throw new ArgumentOutOfRangeException(nameof(index));

        T element = _elements[index];
        _elements.RemoveAt(index);
        return element;
    }

    public bool Contains(T element)
    {
        return _elements.Contains(element);
    }

    public void Clear()
    {
        _elements.Clear();
    }

    public void InsertAt(T element, int index)
    {
        if (index < 0 || index > _elements.Count)
            throw new ArgumentOutOfRangeException(nameof(index));

        _elements.Insert(index, element);
    }

    public void DeleteAt(int index)
    {
        if (index < 0 || index >= _elements.Count)
            throw new ArgumentOutOfRangeException(nameof(index));

        _elements.RemoveAt(index);
    }

    public T Find(int index)
    {
        if (index < 0 || index >= _elements.Count)
            throw new ArgumentOutOfRangeException(nameof(index));

        return _elements[index];
    }
}

3. 
public interface IRepository<T>
{
    void Add(T item);
    void Remove(T item);
    void Save();
    IEnumerable<T> GetAll();
    T GetById(int id);
}

public class Entity
{
    public int Id { get; set; }
}

public class GenericRepository<T> : IRepository<T> where T : Entity
{
    private List<T> _items = new List<T>();

    public void Add(T item)
    {
        _items.Add(item);
    }

    public void Remove(T item)
    {
        _items.Remove(item);
    }

    public void Save()
    {
        Console.WriteLine("Changes saved.");
    }

    public IEnumerable<T> GetAll()
    {
        return _items;
    }

    public T GetById(int id)
    {
        return _items.Find(item => item.Id == id);
    }
} 
